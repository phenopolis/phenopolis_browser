# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class VariantUserCommentComments(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, text: str=None, user_id: str=None, contact: str=None):  # noqa: E501
        """VariantUserCommentComments - a model defined in Swagger

        :param text: The text of this VariantUserCommentComments.  # noqa: E501
        :type text: str
        :param user_id: The user_id of this VariantUserCommentComments.  # noqa: E501
        :type user_id: str
        :param contact: The contact of this VariantUserCommentComments.  # noqa: E501
        :type contact: str
        """
        self.swagger_types = {
            'text': str,
            'user_id': str,
            'contact': str
        }

        self.attribute_map = {
            'text': 'text',
            'user_id': 'userId',
            'contact': 'contact'
        }

        self._text = text
        self._user_id = user_id
        self._contact = contact

    @classmethod
    def from_dict(cls, dikt) -> 'VariantUserCommentComments':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Variant_userComment_comments of this VariantUserCommentComments.  # noqa: E501
        :rtype: VariantUserCommentComments
        """
        return util.deserialize_model(dikt, cls)

    @property
    def text(self) -> str:
        """Gets the text of this VariantUserCommentComments.


        :return: The text of this VariantUserCommentComments.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this VariantUserCommentComments.


        :param text: The text of this VariantUserCommentComments.
        :type text: str
        """

        self._text = text

    @property
    def user_id(self) -> str:
        """Gets the user_id of this VariantUserCommentComments.


        :return: The user_id of this VariantUserCommentComments.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this VariantUserCommentComments.


        :param user_id: The user_id of this VariantUserCommentComments.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def contact(self) -> str:
        """Gets the contact of this VariantUserCommentComments.


        :return: The contact of this VariantUserCommentComments.
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact: str):
        """Sets the contact of this VariantUserCommentComments.


        :param contact: The contact of this VariantUserCommentComments.
        :type contact: str
        """

        self._contact = contact
