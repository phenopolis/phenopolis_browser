# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.variant_filters_genotypes import VariantFiltersGenotypes  # noqa: F401,E501
from swagger_server.models.variant_filters_gnomad import VariantFiltersGnomad  # noqa: F401,E501
from swagger_server.models.variant_filters_gnomad_af import VariantFiltersGnomadAf  # noqa: F401,E501
from swagger_server import util


class VariantFilters(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, chromosome: str=None, start: int=None, stop: int=None, gene: str=None, genotypes: List[VariantFiltersGenotypes]=None, gnomad: VariantFiltersGnomad=None, cadd: VariantFiltersGnomadAf=None):  # noqa: E501
        """VariantFilters - a model defined in Swagger

        :param chromosome: The chromosome of this VariantFilters.  # noqa: E501
        :type chromosome: str
        :param start: The start of this VariantFilters.  # noqa: E501
        :type start: int
        :param stop: The stop of this VariantFilters.  # noqa: E501
        :type stop: int
        :param gene: The gene of this VariantFilters.  # noqa: E501
        :type gene: str
        :param genotypes: The genotypes of this VariantFilters.  # noqa: E501
        :type genotypes: List[VariantFiltersGenotypes]
        :param gnomad: The gnomad of this VariantFilters.  # noqa: E501
        :type gnomad: VariantFiltersGnomad
        :param cadd: The cadd of this VariantFilters.  # noqa: E501
        :type cadd: VariantFiltersGnomadAf
        """
        self.swagger_types = {
            'chromosome': str,
            'start': int,
            'stop': int,
            'gene': str,
            'genotypes': List[VariantFiltersGenotypes],
            'gnomad': VariantFiltersGnomad,
            'cadd': VariantFiltersGnomadAf
        }

        self.attribute_map = {
            'chromosome': 'chromosome',
            'start': 'start',
            'stop': 'stop',
            'gene': 'gene',
            'genotypes': 'genotypes',
            'gnomad': 'gnomad',
            'cadd': 'cadd'
        }

        self._chromosome = chromosome
        self._start = start
        self._stop = stop
        self._gene = gene
        self._genotypes = genotypes
        self._gnomad = gnomad
        self._cadd = cadd

    @classmethod
    def from_dict(cls, dikt) -> 'VariantFilters':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VariantFilters of this VariantFilters.  # noqa: E501
        :rtype: VariantFilters
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chromosome(self) -> str:
        """Gets the chromosome of this VariantFilters.

        if queried from e.g. gene or range  # noqa: E501

        :return: The chromosome of this VariantFilters.
        :rtype: str
        """
        return self._chromosome

    @chromosome.setter
    def chromosome(self, chromosome: str):
        """Sets the chromosome of this VariantFilters.

        if queried from e.g. gene or range  # noqa: E501

        :param chromosome: The chromosome of this VariantFilters.
        :type chromosome: str
        """

        self._chromosome = chromosome

    @property
    def start(self) -> int:
        """Gets the start of this VariantFilters.


        :return: The start of this VariantFilters.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start: int):
        """Sets the start of this VariantFilters.


        :param start: The start of this VariantFilters.
        :type start: int
        """

        self._start = start

    @property
    def stop(self) -> int:
        """Gets the stop of this VariantFilters.


        :return: The stop of this VariantFilters.
        :rtype: int
        """
        return self._stop

    @stop.setter
    def stop(self, stop: int):
        """Sets the stop of this VariantFilters.


        :param stop: The stop of this VariantFilters.
        :type stop: int
        """

        self._stop = stop

    @property
    def gene(self) -> str:
        """Gets the gene of this VariantFilters.


        :return: The gene of this VariantFilters.
        :rtype: str
        """
        return self._gene

    @gene.setter
    def gene(self, gene: str):
        """Sets the gene of this VariantFilters.


        :param gene: The gene of this VariantFilters.
        :type gene: str
        """

        self._gene = gene

    @property
    def genotypes(self) -> List[VariantFiltersGenotypes]:
        """Gets the genotypes of this VariantFilters.

        This is where you query a patient's variants. Note that you can also do simple arbitrary segregations here  # noqa: E501

        :return: The genotypes of this VariantFilters.
        :rtype: List[VariantFiltersGenotypes]
        """
        return self._genotypes

    @genotypes.setter
    def genotypes(self, genotypes: List[VariantFiltersGenotypes]):
        """Sets the genotypes of this VariantFilters.

        This is where you query a patient's variants. Note that you can also do simple arbitrary segregations here  # noqa: E501

        :param genotypes: The genotypes of this VariantFilters.
        :type genotypes: List[VariantFiltersGenotypes]
        """

        self._genotypes = genotypes

    @property
    def gnomad(self) -> VariantFiltersGnomad:
        """Gets the gnomad of this VariantFilters.


        :return: The gnomad of this VariantFilters.
        :rtype: VariantFiltersGnomad
        """
        return self._gnomad

    @gnomad.setter
    def gnomad(self, gnomad: VariantFiltersGnomad):
        """Sets the gnomad of this VariantFilters.


        :param gnomad: The gnomad of this VariantFilters.
        :type gnomad: VariantFiltersGnomad
        """

        self._gnomad = gnomad

    @property
    def cadd(self) -> VariantFiltersGnomadAf:
        """Gets the cadd of this VariantFilters.


        :return: The cadd of this VariantFilters.
        :rtype: VariantFiltersGnomadAf
        """
        return self._cadd

    @cadd.setter
    def cadd(self, cadd: VariantFiltersGnomadAf):
        """Sets the cadd of this VariantFilters.


        :param cadd: The cadd of this VariantFilters.
        :type cadd: VariantFiltersGnomadAf
        """

        self._cadd = cadd
