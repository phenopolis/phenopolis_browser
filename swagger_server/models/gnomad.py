# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.age_hist import AgeHist  # noqa: F401,E501
from swagger_server.models.gnomad_base import GnomadBase  # noqa: F401,E501
from swagger_server.models.gnomad_filters import GnomadFilters  # noqa: F401,E501
from swagger_server import util


class Gnomad(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, filters: GnomadFilters=None, covered: bool=None, pop_filter: List[str]=None, age_het: AgeHist=None, age_hom: AgeHist=None, afr: GnomadBase=None, amr: GnomadBase=None, asj: GnomadBase=None, eas: GnomadBase=None, fin: GnomadBase=None, nfe: GnomadBase=None, sas: GnomadBase=None, oth: GnomadBase=None, male: GnomadBase=None, female: GnomadBase=None, overall: GnomadBase=None):  # noqa: E501
        """Gnomad - a model defined in Swagger

        :param filters: The filters of this Gnomad.  # noqa: E501
        :type filters: GnomadFilters
        :param covered: The covered of this Gnomad.  # noqa: E501
        :type covered: bool
        :param pop_filter: The pop_filter of this Gnomad.  # noqa: E501
        :type pop_filter: List[str]
        :param age_het: The age_het of this Gnomad.  # noqa: E501
        :type age_het: AgeHist
        :param age_hom: The age_hom of this Gnomad.  # noqa: E501
        :type age_hom: AgeHist
        :param afr: The afr of this Gnomad.  # noqa: E501
        :type afr: GnomadBase
        :param amr: The amr of this Gnomad.  # noqa: E501
        :type amr: GnomadBase
        :param asj: The asj of this Gnomad.  # noqa: E501
        :type asj: GnomadBase
        :param eas: The eas of this Gnomad.  # noqa: E501
        :type eas: GnomadBase
        :param fin: The fin of this Gnomad.  # noqa: E501
        :type fin: GnomadBase
        :param nfe: The nfe of this Gnomad.  # noqa: E501
        :type nfe: GnomadBase
        :param sas: The sas of this Gnomad.  # noqa: E501
        :type sas: GnomadBase
        :param oth: The oth of this Gnomad.  # noqa: E501
        :type oth: GnomadBase
        :param male: The male of this Gnomad.  # noqa: E501
        :type male: GnomadBase
        :param female: The female of this Gnomad.  # noqa: E501
        :type female: GnomadBase
        :param overall: The overall of this Gnomad.  # noqa: E501
        :type overall: GnomadBase
        """
        self.swagger_types = {
            'filters': GnomadFilters,
            'covered': bool,
            'pop_filter': List[str],
            'age_het': AgeHist,
            'age_hom': AgeHist,
            'afr': GnomadBase,
            'amr': GnomadBase,
            'asj': GnomadBase,
            'eas': GnomadBase,
            'fin': GnomadBase,
            'nfe': GnomadBase,
            'sas': GnomadBase,
            'oth': GnomadBase,
            'male': GnomadBase,
            'female': GnomadBase,
            'overall': GnomadBase
        }

        self.attribute_map = {
            'filters': 'filters',
            'covered': 'covered',
            'pop_filter': 'pop_filter',
            'age_het': 'ageHet',
            'age_hom': 'ageHom',
            'afr': 'afr',
            'amr': 'amr',
            'asj': 'asj',
            'eas': 'eas',
            'fin': 'fin',
            'nfe': 'nfe',
            'sas': 'sas',
            'oth': 'oth',
            'male': 'male',
            'female': 'female',
            'overall': 'overall'
        }

        self._filters = filters
        self._covered = covered
        self._pop_filter = pop_filter
        self._age_het = age_het
        self._age_hom = age_hom
        self._afr = afr
        self._amr = amr
        self._asj = asj
        self._eas = eas
        self._fin = fin
        self._nfe = nfe
        self._sas = sas
        self._oth = oth
        self._male = male
        self._female = female
        self._overall = overall

    @classmethod
    def from_dict(cls, dikt) -> 'Gnomad':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Gnomad of this Gnomad.  # noqa: E501
        :rtype: Gnomad
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filters(self) -> GnomadFilters:
        """Gets the filters of this Gnomad.


        :return: The filters of this Gnomad.
        :rtype: GnomadFilters
        """
        return self._filters

    @filters.setter
    def filters(self, filters: GnomadFilters):
        """Sets the filters of this Gnomad.


        :param filters: The filters of this Gnomad.
        :type filters: GnomadFilters
        """

        self._filters = filters

    @property
    def covered(self) -> bool:
        """Gets the covered of this Gnomad.


        :return: The covered of this Gnomad.
        :rtype: bool
        """
        return self._covered

    @covered.setter
    def covered(self, covered: bool):
        """Sets the covered of this Gnomad.


        :param covered: The covered of this Gnomad.
        :type covered: bool
        """

        self._covered = covered

    @property
    def pop_filter(self) -> List[str]:
        """Gets the pop_filter of this Gnomad.

        Populations that have far too many carriers than average. Used in Phenogenon  # noqa: E501

        :return: The pop_filter of this Gnomad.
        :rtype: List[str]
        """
        return self._pop_filter

    @pop_filter.setter
    def pop_filter(self, pop_filter: List[str]):
        """Sets the pop_filter of this Gnomad.

        Populations that have far too many carriers than average. Used in Phenogenon  # noqa: E501

        :param pop_filter: The pop_filter of this Gnomad.
        :type pop_filter: List[str]
        """

        self._pop_filter = pop_filter

    @property
    def age_het(self) -> AgeHist:
        """Gets the age_het of this Gnomad.


        :return: The age_het of this Gnomad.
        :rtype: AgeHist
        """
        return self._age_het

    @age_het.setter
    def age_het(self, age_het: AgeHist):
        """Sets the age_het of this Gnomad.


        :param age_het: The age_het of this Gnomad.
        :type age_het: AgeHist
        """

        self._age_het = age_het

    @property
    def age_hom(self) -> AgeHist:
        """Gets the age_hom of this Gnomad.


        :return: The age_hom of this Gnomad.
        :rtype: AgeHist
        """
        return self._age_hom

    @age_hom.setter
    def age_hom(self, age_hom: AgeHist):
        """Sets the age_hom of this Gnomad.


        :param age_hom: The age_hom of this Gnomad.
        :type age_hom: AgeHist
        """

        self._age_hom = age_hom

    @property
    def afr(self) -> GnomadBase:
        """Gets the afr of this Gnomad.


        :return: The afr of this Gnomad.
        :rtype: GnomadBase
        """
        return self._afr

    @afr.setter
    def afr(self, afr: GnomadBase):
        """Sets the afr of this Gnomad.


        :param afr: The afr of this Gnomad.
        :type afr: GnomadBase
        """

        self._afr = afr

    @property
    def amr(self) -> GnomadBase:
        """Gets the amr of this Gnomad.


        :return: The amr of this Gnomad.
        :rtype: GnomadBase
        """
        return self._amr

    @amr.setter
    def amr(self, amr: GnomadBase):
        """Sets the amr of this Gnomad.


        :param amr: The amr of this Gnomad.
        :type amr: GnomadBase
        """

        self._amr = amr

    @property
    def asj(self) -> GnomadBase:
        """Gets the asj of this Gnomad.


        :return: The asj of this Gnomad.
        :rtype: GnomadBase
        """
        return self._asj

    @asj.setter
    def asj(self, asj: GnomadBase):
        """Sets the asj of this Gnomad.


        :param asj: The asj of this Gnomad.
        :type asj: GnomadBase
        """

        self._asj = asj

    @property
    def eas(self) -> GnomadBase:
        """Gets the eas of this Gnomad.


        :return: The eas of this Gnomad.
        :rtype: GnomadBase
        """
        return self._eas

    @eas.setter
    def eas(self, eas: GnomadBase):
        """Sets the eas of this Gnomad.


        :param eas: The eas of this Gnomad.
        :type eas: GnomadBase
        """

        self._eas = eas

    @property
    def fin(self) -> GnomadBase:
        """Gets the fin of this Gnomad.


        :return: The fin of this Gnomad.
        :rtype: GnomadBase
        """
        return self._fin

    @fin.setter
    def fin(self, fin: GnomadBase):
        """Sets the fin of this Gnomad.


        :param fin: The fin of this Gnomad.
        :type fin: GnomadBase
        """

        self._fin = fin

    @property
    def nfe(self) -> GnomadBase:
        """Gets the nfe of this Gnomad.


        :return: The nfe of this Gnomad.
        :rtype: GnomadBase
        """
        return self._nfe

    @nfe.setter
    def nfe(self, nfe: GnomadBase):
        """Sets the nfe of this Gnomad.


        :param nfe: The nfe of this Gnomad.
        :type nfe: GnomadBase
        """

        self._nfe = nfe

    @property
    def sas(self) -> GnomadBase:
        """Gets the sas of this Gnomad.


        :return: The sas of this Gnomad.
        :rtype: GnomadBase
        """
        return self._sas

    @sas.setter
    def sas(self, sas: GnomadBase):
        """Sets the sas of this Gnomad.


        :param sas: The sas of this Gnomad.
        :type sas: GnomadBase
        """

        self._sas = sas

    @property
    def oth(self) -> GnomadBase:
        """Gets the oth of this Gnomad.


        :return: The oth of this Gnomad.
        :rtype: GnomadBase
        """
        return self._oth

    @oth.setter
    def oth(self, oth: GnomadBase):
        """Sets the oth of this Gnomad.


        :param oth: The oth of this Gnomad.
        :type oth: GnomadBase
        """

        self._oth = oth

    @property
    def male(self) -> GnomadBase:
        """Gets the male of this Gnomad.


        :return: The male of this Gnomad.
        :rtype: GnomadBase
        """
        return self._male

    @male.setter
    def male(self, male: GnomadBase):
        """Sets the male of this Gnomad.


        :param male: The male of this Gnomad.
        :type male: GnomadBase
        """

        self._male = male

    @property
    def female(self) -> GnomadBase:
        """Gets the female of this Gnomad.


        :return: The female of this Gnomad.
        :rtype: GnomadBase
        """
        return self._female

    @female.setter
    def female(self, female: GnomadBase):
        """Sets the female of this Gnomad.


        :param female: The female of this Gnomad.
        :type female: GnomadBase
        """

        self._female = female

    @property
    def overall(self) -> GnomadBase:
        """Gets the overall of this Gnomad.


        :return: The overall of this Gnomad.
        :rtype: GnomadBase
        """
        return self._overall

    @overall.setter
    def overall(self, overall: GnomadBase):
        """Sets the overall of this Gnomad.


        :param overall: The overall of this Gnomad.
        :type overall: GnomadBase
        """

        self._overall = overall
