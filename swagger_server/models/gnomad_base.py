# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class GnomadBase(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, hc: int=None, hf: float=None, ac: int=None, an: int=None, af: float=None):  # noqa: E501
        """GnomadBase - a model defined in Swagger

        :param hc: The hc of this GnomadBase.  # noqa: E501
        :type hc: int
        :param hf: The hf of this GnomadBase.  # noqa: E501
        :type hf: float
        :param ac: The ac of this GnomadBase.  # noqa: E501
        :type ac: int
        :param an: The an of this GnomadBase.  # noqa: E501
        :type an: int
        :param af: The af of this GnomadBase.  # noqa: E501
        :type af: float
        """
        self.swagger_types = {
            'hc': int,
            'hf': float,
            'ac': int,
            'an': int,
            'af': float
        }

        self.attribute_map = {
            'hc': 'hc',
            'hf': 'hf',
            'ac': 'ac',
            'an': 'an',
            'af': 'af'
        }

        self._hc = hc
        self._hf = hf
        self._ac = ac
        self._an = an
        self._af = af

    @classmethod
    def from_dict(cls, dikt) -> 'GnomadBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GnomadBase of this GnomadBase.  # noqa: E501
        :rtype: GnomadBase
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hc(self) -> int:
        """Gets the hc of this GnomadBase.

        homozygote count  # noqa: E501

        :return: The hc of this GnomadBase.
        :rtype: int
        """
        return self._hc

    @hc.setter
    def hc(self, hc: int):
        """Sets the hc of this GnomadBase.

        homozygote count  # noqa: E501

        :param hc: The hc of this GnomadBase.
        :type hc: int
        """

        self._hc = hc

    @property
    def hf(self) -> float:
        """Gets the hf of this GnomadBase.

        estimated homozygote frequency  # noqa: E501

        :return: The hf of this GnomadBase.
        :rtype: float
        """
        return self._hf

    @hf.setter
    def hf(self, hf: float):
        """Sets the hf of this GnomadBase.

        estimated homozygote frequency  # noqa: E501

        :param hf: The hf of this GnomadBase.
        :type hf: float
        """

        self._hf = hf

    @property
    def ac(self) -> int:
        """Gets the ac of this GnomadBase.

        alternative allele count  # noqa: E501

        :return: The ac of this GnomadBase.
        :rtype: int
        """
        return self._ac

    @ac.setter
    def ac(self, ac: int):
        """Sets the ac of this GnomadBase.

        alternative allele count  # noqa: E501

        :param ac: The ac of this GnomadBase.
        :type ac: int
        """

        self._ac = ac

    @property
    def an(self) -> int:
        """Gets the an of this GnomadBase.

        total allele count  # noqa: E501

        :return: The an of this GnomadBase.
        :rtype: int
        """
        return self._an

    @an.setter
    def an(self, an: int):
        """Sets the an of this GnomadBase.

        total allele count  # noqa: E501

        :param an: The an of this GnomadBase.
        :type an: int
        """

        self._an = an

    @property
    def af(self) -> float:
        """Gets the af of this GnomadBase.

        alternative allele frequency  # noqa: E501

        :return: The af of this GnomadBase.
        :rtype: float
        """
        return self._af

    @af.setter
    def af(self, af: float):
        """Sets the af of this GnomadBase.

        alternative allele frequency  # noqa: E501

        :param af: The af of this GnomadBase.
        :type af: float
        """

        self._af = af
