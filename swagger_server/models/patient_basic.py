# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.patient_basic_full_hpos import PatientBasicFullHpos  # noqa: F401,E501
from swagger_server import util


class PatientBasic(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, full_hpos: List[PatientBasicFullHpos]=None, unrelated: bool=None, cohort: str=None):  # noqa: E501
        """PatientBasic - a model defined in Swagger

        :param id: The id of this PatientBasic.  # noqa: E501
        :type id: str
        :param full_hpos: The full_hpos of this PatientBasic.  # noqa: E501
        :type full_hpos: List[PatientBasicFullHpos]
        :param unrelated: The unrelated of this PatientBasic.  # noqa: E501
        :type unrelated: bool
        :param cohort: The cohort of this PatientBasic.  # noqa: E501
        :type cohort: str
        """
        self.swagger_types = {
            'id': str,
            'full_hpos': List[PatientBasicFullHpos],
            'unrelated': bool,
            'cohort': str
        }

        self.attribute_map = {
            'id': 'id',
            'full_hpos': 'fullHpos',
            'unrelated': 'unrelated',
            'cohort': 'cohort'
        }

        self._id = id
        self._full_hpos = full_hpos
        self._unrelated = unrelated
        self._cohort = cohort

    @classmethod
    def from_dict(cls, dikt) -> 'PatientBasic':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PatientBasic of this PatientBasic.  # noqa: E501
        :rtype: PatientBasic
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this PatientBasic.


        :return: The id of this PatientBasic.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this PatientBasic.


        :param id: The id of this PatientBasic.
        :type id: str
        """

        self._id = id

    @property
    def full_hpos(self) -> List[PatientBasicFullHpos]:
        """Gets the full_hpos of this PatientBasic.


        :return: The full_hpos of this PatientBasic.
        :rtype: List[PatientBasicFullHpos]
        """
        return self._full_hpos

    @full_hpos.setter
    def full_hpos(self, full_hpos: List[PatientBasicFullHpos]):
        """Sets the full_hpos of this PatientBasic.


        :param full_hpos: The full_hpos of this PatientBasic.
        :type full_hpos: List[PatientBasicFullHpos]
        """

        self._full_hpos = full_hpos

    @property
    def unrelated(self) -> bool:
        """Gets the unrelated of this PatientBasic.


        :return: The unrelated of this PatientBasic.
        :rtype: bool
        """
        return self._unrelated

    @unrelated.setter
    def unrelated(self, unrelated: bool):
        """Sets the unrelated of this PatientBasic.


        :param unrelated: The unrelated of this PatientBasic.
        :type unrelated: bool
        """

        self._unrelated = unrelated

    @property
    def cohort(self) -> str:
        """Gets the cohort of this PatientBasic.


        :return: The cohort of this PatientBasic.
        :rtype: str
        """
        return self._cohort

    @cohort.setter
    def cohort(self, cohort: str):
        """Sets the cohort of this PatientBasic.


        :param cohort: The cohort of this PatientBasic.
        :type cohort: str
        """

        self._cohort = cohort
