# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.variant_user_comment_comments import VariantUserCommentComments  # noqa: F401,E501
from swagger_server import util


class VariantUserComment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, clinical_rating: float=None, false_positive_counts: int=None, comments: List[VariantUserCommentComments]=None):  # noqa: E501
        """VariantUserComment - a model defined in Swagger

        :param clinical_rating: The clinical_rating of this VariantUserComment.  # noqa: E501
        :type clinical_rating: float
        :param false_positive_counts: The false_positive_counts of this VariantUserComment.  # noqa: E501
        :type false_positive_counts: int
        :param comments: The comments of this VariantUserComment.  # noqa: E501
        :type comments: List[VariantUserCommentComments]
        """
        self.swagger_types = {
            'clinical_rating': float,
            'false_positive_counts': int,
            'comments': List[VariantUserCommentComments]
        }

        self.attribute_map = {
            'clinical_rating': 'clinicalRating',
            'false_positive_counts': 'falsePositiveCounts',
            'comments': 'comments'
        }

        self._clinical_rating = clinical_rating
        self._false_positive_counts = false_positive_counts
        self._comments = comments

    @classmethod
    def from_dict(cls, dikt) -> 'VariantUserComment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Variant_userComment of this VariantUserComment.  # noqa: E501
        :rtype: VariantUserComment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clinical_rating(self) -> float:
        """Gets the clinical_rating of this VariantUserComment.

        averaged ratings from 1 to 5 from users. 1 for definitely benign, and 5 for definitely pathogenic  # noqa: E501

        :return: The clinical_rating of this VariantUserComment.
        :rtype: float
        """
        return self._clinical_rating

    @clinical_rating.setter
    def clinical_rating(self, clinical_rating: float):
        """Sets the clinical_rating of this VariantUserComment.

        averaged ratings from 1 to 5 from users. 1 for definitely benign, and 5 for definitely pathogenic  # noqa: E501

        :param clinical_rating: The clinical_rating of this VariantUserComment.
        :type clinical_rating: float
        """

        self._clinical_rating = clinical_rating

    @property
    def false_positive_counts(self) -> int:
        """Gets the false_positive_counts of this VariantUserComment.

        Counts of users flagging this variant as non-existence  # noqa: E501

        :return: The false_positive_counts of this VariantUserComment.
        :rtype: int
        """
        return self._false_positive_counts

    @false_positive_counts.setter
    def false_positive_counts(self, false_positive_counts: int):
        """Sets the false_positive_counts of this VariantUserComment.

        Counts of users flagging this variant as non-existence  # noqa: E501

        :param false_positive_counts: The false_positive_counts of this VariantUserComment.
        :type false_positive_counts: int
        """

        self._false_positive_counts = false_positive_counts

    @property
    def comments(self) -> List[VariantUserCommentComments]:
        """Gets the comments of this VariantUserComment.

        All the comments about this variant submitted by users  # noqa: E501

        :return: The comments of this VariantUserComment.
        :rtype: List[VariantUserCommentComments]
        """
        return self._comments

    @comments.setter
    def comments(self, comments: List[VariantUserCommentComments]):
        """Sets the comments of this VariantUserComment.

        All the comments about this variant submitted by users  # noqa: E501

        :param comments: The comments of this VariantUserComment.
        :type comments: List[VariantUserCommentComments]
        """

        self._comments = comments
