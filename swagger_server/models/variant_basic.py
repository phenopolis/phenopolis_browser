# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class VariantBasic(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, chromosome: str=None, position: float=None, rsid: str=None, gene: List[str]=None, filter: str=None, cadd: float=None, feature_id: str=None, feature_type: str=None, hgvs_c: str=None, hgvs_p: str=None, consequence: str=None, impact: str=None, af_tommo: float=None, af_jirdc: float=None, af_krgdb: float=None):  # noqa: E501
        """VariantBasic - a model defined in Swagger

        :param id: The id of this VariantBasic.  # noqa: E501
        :type id: str
        :param chromosome: The chromosome of this VariantBasic.  # noqa: E501
        :type chromosome: str
        :param position: The position of this VariantBasic.  # noqa: E501
        :type position: float
        :param rsid: The rsid of this VariantBasic.  # noqa: E501
        :type rsid: str
        :param gene: The gene of this VariantBasic.  # noqa: E501
        :type gene: List[str]
        :param filter: The filter of this VariantBasic.  # noqa: E501
        :type filter: str
        :param cadd: The cadd of this VariantBasic.  # noqa: E501
        :type cadd: float
        :param feature_id: The feature_id of this VariantBasic.  # noqa: E501
        :type feature_id: str
        :param feature_type: The feature_type of this VariantBasic.  # noqa: E501
        :type feature_type: str
        :param hgvs_c: The hgvs_c of this VariantBasic.  # noqa: E501
        :type hgvs_c: str
        :param hgvs_p: The hgvs_p of this VariantBasic.  # noqa: E501
        :type hgvs_p: str
        :param consequence: The consequence of this VariantBasic.  # noqa: E501
        :type consequence: str
        :param impact: The impact of this VariantBasic.  # noqa: E501
        :type impact: str
        :param af_tommo: The af_tommo of this VariantBasic.  # noqa: E501
        :type af_tommo: float
        :param af_jirdc: The af_jirdc of this VariantBasic.  # noqa: E501
        :type af_jirdc: float
        :param af_krgdb: The af_krgdb of this VariantBasic.  # noqa: E501
        :type af_krgdb: float
        """
        self.swagger_types = {
            'id': str,
            'chromosome': str,
            'position': float,
            'rsid': str,
            'gene': List[str],
            'filter': str,
            'cadd': float,
            'feature_id': str,
            'feature_type': str,
            'hgvs_c': str,
            'hgvs_p': str,
            'consequence': str,
            'impact': str,
            'af_tommo': float,
            'af_jirdc': float,
            'af_krgdb': float
        }

        self.attribute_map = {
            'id': 'id',
            'chromosome': 'chromosome',
            'position': 'position',
            'rsid': 'rsid',
            'gene': 'gene',
            'filter': 'filter',
            'cadd': 'cadd',
            'feature_id': 'feature_id',
            'feature_type': 'feature_type',
            'hgvs_c': 'hgvs_c',
            'hgvs_p': 'hgvs_p',
            'consequence': 'consequence',
            'impact': 'impact',
            'af_tommo': 'af_tommo',
            'af_jirdc': 'af_jirdc',
            'af_krgdb': 'af_krgdb'
        }

        self._id = id
        self._chromosome = chromosome
        self._position = position
        self._rsid = rsid
        self._gene = gene
        self._filter = filter
        self._cadd = cadd
        self._feature_id = feature_id
        self._feature_type = feature_type
        self._hgvs_c = hgvs_c
        self._hgvs_p = hgvs_p
        self._consequence = consequence
        self._impact = impact
        self._af_tommo = af_tommo
        self._af_jirdc = af_jirdc
        self._af_krgdb = af_krgdb

    @classmethod
    def from_dict(cls, dikt) -> 'VariantBasic':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VariantBasic of this VariantBasic.  # noqa: E501
        :rtype: VariantBasic
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this VariantBasic.


        :return: The id of this VariantBasic.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this VariantBasic.


        :param id: The id of this VariantBasic.
        :type id: str
        """

        self._id = id

    @property
    def chromosome(self) -> str:
        """Gets the chromosome of this VariantBasic.


        :return: The chromosome of this VariantBasic.
        :rtype: str
        """
        return self._chromosome

    @chromosome.setter
    def chromosome(self, chromosome: str):
        """Sets the chromosome of this VariantBasic.


        :param chromosome: The chromosome of this VariantBasic.
        :type chromosome: str
        """

        self._chromosome = chromosome

    @property
    def position(self) -> float:
        """Gets the position of this VariantBasic.


        :return: The position of this VariantBasic.
        :rtype: float
        """
        return self._position

    @position.setter
    def position(self, position: float):
        """Sets the position of this VariantBasic.


        :param position: The position of this VariantBasic.
        :type position: float
        """

        self._position = position

    @property
    def rsid(self) -> str:
        """Gets the rsid of this VariantBasic.


        :return: The rsid of this VariantBasic.
        :rtype: str
        """
        return self._rsid

    @rsid.setter
    def rsid(self, rsid: str):
        """Sets the rsid of this VariantBasic.


        :param rsid: The rsid of this VariantBasic.
        :type rsid: str
        """

        self._rsid = rsid

    @property
    def gene(self) -> List[str]:
        """Gets the gene of this VariantBasic.


        :return: The gene of this VariantBasic.
        :rtype: List[str]
        """
        return self._gene

    @gene.setter
    def gene(self, gene: List[str]):
        """Sets the gene of this VariantBasic.


        :param gene: The gene of this VariantBasic.
        :type gene: List[str]
        """

        self._gene = gene

    @property
    def filter(self) -> str:
        """Gets the filter of this VariantBasic.


        :return: The filter of this VariantBasic.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter: str):
        """Sets the filter of this VariantBasic.


        :param filter: The filter of this VariantBasic.
        :type filter: str
        """

        self._filter = filter

    @property
    def cadd(self) -> float:
        """Gets the cadd of this VariantBasic.


        :return: The cadd of this VariantBasic.
        :rtype: float
        """
        return self._cadd

    @cadd.setter
    def cadd(self, cadd: float):
        """Sets the cadd of this VariantBasic.


        :param cadd: The cadd of this VariantBasic.
        :type cadd: float
        """

        self._cadd = cadd

    @property
    def feature_id(self) -> str:
        """Gets the feature_id of this VariantBasic.


        :return: The feature_id of this VariantBasic.
        :rtype: str
        """
        return self._feature_id

    @feature_id.setter
    def feature_id(self, feature_id: str):
        """Sets the feature_id of this VariantBasic.


        :param feature_id: The feature_id of this VariantBasic.
        :type feature_id: str
        """

        self._feature_id = feature_id

    @property
    def feature_type(self) -> str:
        """Gets the feature_type of this VariantBasic.


        :return: The feature_type of this VariantBasic.
        :rtype: str
        """
        return self._feature_type

    @feature_type.setter
    def feature_type(self, feature_type: str):
        """Sets the feature_type of this VariantBasic.


        :param feature_type: The feature_type of this VariantBasic.
        :type feature_type: str
        """

        self._feature_type = feature_type

    @property
    def hgvs_c(self) -> str:
        """Gets the hgvs_c of this VariantBasic.


        :return: The hgvs_c of this VariantBasic.
        :rtype: str
        """
        return self._hgvs_c

    @hgvs_c.setter
    def hgvs_c(self, hgvs_c: str):
        """Sets the hgvs_c of this VariantBasic.


        :param hgvs_c: The hgvs_c of this VariantBasic.
        :type hgvs_c: str
        """

        self._hgvs_c = hgvs_c

    @property
    def hgvs_p(self) -> str:
        """Gets the hgvs_p of this VariantBasic.


        :return: The hgvs_p of this VariantBasic.
        :rtype: str
        """
        return self._hgvs_p

    @hgvs_p.setter
    def hgvs_p(self, hgvs_p: str):
        """Sets the hgvs_p of this VariantBasic.


        :param hgvs_p: The hgvs_p of this VariantBasic.
        :type hgvs_p: str
        """

        self._hgvs_p = hgvs_p

    @property
    def consequence(self) -> str:
        """Gets the consequence of this VariantBasic.


        :return: The consequence of this VariantBasic.
        :rtype: str
        """
        return self._consequence

    @consequence.setter
    def consequence(self, consequence: str):
        """Sets the consequence of this VariantBasic.


        :param consequence: The consequence of this VariantBasic.
        :type consequence: str
        """

        self._consequence = consequence

    @property
    def impact(self) -> str:
        """Gets the impact of this VariantBasic.


        :return: The impact of this VariantBasic.
        :rtype: str
        """
        return self._impact

    @impact.setter
    def impact(self, impact: str):
        """Sets the impact of this VariantBasic.


        :param impact: The impact of this VariantBasic.
        :type impact: str
        """

        self._impact = impact

    @property
    def af_tommo(self) -> float:
        """Gets the af_tommo of this VariantBasic.

        Tommo  # noqa: E501

        :return: The af_tommo of this VariantBasic.
        :rtype: float
        """
        return self._af_tommo

    @af_tommo.setter
    def af_tommo(self, af_tommo: float):
        """Sets the af_tommo of this VariantBasic.

        Tommo  # noqa: E501

        :param af_tommo: The af_tommo of this VariantBasic.
        :type af_tommo: float
        """

        self._af_tommo = af_tommo

    @property
    def af_jirdc(self) -> float:
        """Gets the af_jirdc of this VariantBasic.

        Japanese  # noqa: E501

        :return: The af_jirdc of this VariantBasic.
        :rtype: float
        """
        return self._af_jirdc

    @af_jirdc.setter
    def af_jirdc(self, af_jirdc: float):
        """Sets the af_jirdc of this VariantBasic.

        Japanese  # noqa: E501

        :param af_jirdc: The af_jirdc of this VariantBasic.
        :type af_jirdc: float
        """

        self._af_jirdc = af_jirdc

    @property
    def af_krgdb(self) -> float:
        """Gets the af_krgdb of this VariantBasic.

        Korean  # noqa: E501

        :return: The af_krgdb of this VariantBasic.
        :rtype: float
        """
        return self._af_krgdb

    @af_krgdb.setter
    def af_krgdb(self, af_krgdb: float):
        """Sets the af_krgdb of this VariantBasic.

        Korean  # noqa: E501

        :param af_krgdb: The af_krgdb of this VariantBasic.
        :type af_krgdb: float
        """

        self._af_krgdb = af_krgdb
