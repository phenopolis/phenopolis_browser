# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class GeneBasic(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, symbol: str=None, p_li: float=None, p_res: float=None, omim: List[str]=None):  # noqa: E501
        """GeneBasic - a model defined in Swagger

        :param id: The id of this GeneBasic.  # noqa: E501
        :type id: str
        :param symbol: The symbol of this GeneBasic.  # noqa: E501
        :type symbol: str
        :param p_li: The p_li of this GeneBasic.  # noqa: E501
        :type p_li: float
        :param p_res: The p_res of this GeneBasic.  # noqa: E501
        :type p_res: float
        :param omim: The omim of this GeneBasic.  # noqa: E501
        :type omim: List[str]
        """
        self.swagger_types = {
            'id': str,
            'symbol': str,
            'p_li': float,
            'p_res': float,
            'omim': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'symbol': 'symbol',
            'p_li': 'pLI',
            'p_res': 'pRes',
            'omim': 'OMIM'
        }

        self._id = id
        self._symbol = symbol
        self._p_li = p_li
        self._p_res = p_res
        self._omim = omim

    @classmethod
    def from_dict(cls, dikt) -> 'GeneBasic':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GeneBasic of this GeneBasic.  # noqa: E501
        :rtype: GeneBasic
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this GeneBasic.


        :return: The id of this GeneBasic.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this GeneBasic.


        :param id: The id of this GeneBasic.
        :type id: str
        """

        self._id = id

    @property
    def symbol(self) -> str:
        """Gets the symbol of this GeneBasic.


        :return: The symbol of this GeneBasic.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol: str):
        """Sets the symbol of this GeneBasic.


        :param symbol: The symbol of this GeneBasic.
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def p_li(self) -> float:
        """Gets the p_li of this GeneBasic.

        can be obtained from gnomAD gene constraint table  # noqa: E501

        :return: The p_li of this GeneBasic.
        :rtype: float
        """
        return self._p_li

    @p_li.setter
    def p_li(self, p_li: float):
        """Sets the p_li of this GeneBasic.

        can be obtained from gnomAD gene constraint table  # noqa: E501

        :param p_li: The p_li of this GeneBasic.
        :type p_li: float
        """

        self._p_li = p_li

    @property
    def p_res(self) -> float:
        """Gets the p_res of this GeneBasic.

        can be obtained from gnomAD gene constraint table  # noqa: E501

        :return: The p_res of this GeneBasic.
        :rtype: float
        """
        return self._p_res

    @p_res.setter
    def p_res(self, p_res: float):
        """Sets the p_res of this GeneBasic.

        can be obtained from gnomAD gene constraint table  # noqa: E501

        :param p_res: The p_res of this GeneBasic.
        :type p_res: float
        """

        self._p_res = p_res

    @property
    def omim(self) -> List[str]:
        """Gets the omim of this GeneBasic.


        :return: The omim of this GeneBasic.
        :rtype: List[str]
        """
        return self._omim

    @omim.setter
    def omim(self, omim: List[str]):
        """Sets the omim of this GeneBasic.


        :param omim: The omim of this GeneBasic.
        :type omim: List[str]
        """

        self._omim = omim
