# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.gnomad import Gnomad  # noqa: F401,E501
from swagger_server import util


class VariantExternalAF(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, gnomad: Gnomad=None, bravo_af: float=None, bravo_hom_f: float=None, kaviar: float=None, tommo: float=None, converge: float=None, krgdb: float=None, jirdc: float=None, ukirdc: float=None):  # noqa: E501
        """VariantExternalAF - a model defined in Swagger

        :param gnomad: The gnomad of this VariantExternalAF.  # noqa: E501
        :type gnomad: Gnomad
        :param bravo_af: The bravo_af of this VariantExternalAF.  # noqa: E501
        :type bravo_af: float
        :param bravo_hom_f: The bravo_hom_f of this VariantExternalAF.  # noqa: E501
        :type bravo_hom_f: float
        :param kaviar: The kaviar of this VariantExternalAF.  # noqa: E501
        :type kaviar: float
        :param tommo: The tommo of this VariantExternalAF.  # noqa: E501
        :type tommo: float
        :param converge: The converge of this VariantExternalAF.  # noqa: E501
        :type converge: float
        :param krgdb: The krgdb of this VariantExternalAF.  # noqa: E501
        :type krgdb: float
        :param jirdc: The jirdc of this VariantExternalAF.  # noqa: E501
        :type jirdc: float
        :param ukirdc: The ukirdc of this VariantExternalAF.  # noqa: E501
        :type ukirdc: float
        """
        self.swagger_types = {
            'gnomad': Gnomad,
            'bravo_af': float,
            'bravo_hom_f': float,
            'kaviar': float,
            'tommo': float,
            'converge': float,
            'krgdb': float,
            'jirdc': float,
            'ukirdc': float
        }

        self.attribute_map = {
            'gnomad': 'gnomad',
            'bravo_af': 'bravo_af',
            'bravo_hom_f': 'bravo_hom_f',
            'kaviar': 'kaviar',
            'tommo': 'tommo',
            'converge': 'converge',
            'krgdb': 'krgdb',
            'jirdc': 'jirdc',
            'ukirdc': 'ukirdc'
        }

        self._gnomad = gnomad
        self._bravo_af = bravo_af
        self._bravo_hom_f = bravo_hom_f
        self._kaviar = kaviar
        self._tommo = tommo
        self._converge = converge
        self._krgdb = krgdb
        self._jirdc = jirdc
        self._ukirdc = ukirdc

    @classmethod
    def from_dict(cls, dikt) -> 'VariantExternalAF':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Variant_external_AF of this VariantExternalAF.  # noqa: E501
        :rtype: VariantExternalAF
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gnomad(self) -> Gnomad:
        """Gets the gnomad of this VariantExternalAF.


        :return: The gnomad of this VariantExternalAF.
        :rtype: Gnomad
        """
        return self._gnomad

    @gnomad.setter
    def gnomad(self, gnomad: Gnomad):
        """Sets the gnomad of this VariantExternalAF.


        :param gnomad: The gnomad of this VariantExternalAF.
        :type gnomad: Gnomad
        """

        self._gnomad = gnomad

    @property
    def bravo_af(self) -> float:
        """Gets the bravo_af of this VariantExternalAF.

        You need to obtain license from https://bravo.sph.umich.edu/ in order to use Bravo  # noqa: E501

        :return: The bravo_af of this VariantExternalAF.
        :rtype: float
        """
        return self._bravo_af

    @bravo_af.setter
    def bravo_af(self, bravo_af: float):
        """Sets the bravo_af of this VariantExternalAF.

        You need to obtain license from https://bravo.sph.umich.edu/ in order to use Bravo  # noqa: E501

        :param bravo_af: The bravo_af of this VariantExternalAF.
        :type bravo_af: float
        """

        self._bravo_af = bravo_af

    @property
    def bravo_hom_f(self) -> float:
        """Gets the bravo_hom_f of this VariantExternalAF.

        You need to obtain license from https://bravo.sph.umich.edu/ in order to use Bravo  # noqa: E501

        :return: The bravo_hom_f of this VariantExternalAF.
        :rtype: float
        """
        return self._bravo_hom_f

    @bravo_hom_f.setter
    def bravo_hom_f(self, bravo_hom_f: float):
        """Sets the bravo_hom_f of this VariantExternalAF.

        You need to obtain license from https://bravo.sph.umich.edu/ in order to use Bravo  # noqa: E501

        :param bravo_hom_f: The bravo_hom_f of this VariantExternalAF.
        :type bravo_hom_f: float
        """

        self._bravo_hom_f = bravo_hom_f

    @property
    def kaviar(self) -> float:
        """Gets the kaviar of this VariantExternalAF.


        :return: The kaviar of this VariantExternalAF.
        :rtype: float
        """
        return self._kaviar

    @kaviar.setter
    def kaviar(self, kaviar: float):
        """Sets the kaviar of this VariantExternalAF.


        :param kaviar: The kaviar of this VariantExternalAF.
        :type kaviar: float
        """

        self._kaviar = kaviar

    @property
    def tommo(self) -> float:
        """Gets the tommo of this VariantExternalAF.

        Allele frequency in Japanese  # noqa: E501

        :return: The tommo of this VariantExternalAF.
        :rtype: float
        """
        return self._tommo

    @tommo.setter
    def tommo(self, tommo: float):
        """Sets the tommo of this VariantExternalAF.

        Allele frequency in Japanese  # noqa: E501

        :param tommo: The tommo of this VariantExternalAF.
        :type tommo: float
        """

        self._tommo = tommo

    @property
    def converge(self) -> float:
        """Gets the converge of this VariantExternalAF.

        Allele frequency in Han Chinese  # noqa: E501

        :return: The converge of this VariantExternalAF.
        :rtype: float
        """
        return self._converge

    @converge.setter
    def converge(self, converge: float):
        """Sets the converge of this VariantExternalAF.

        Allele frequency in Han Chinese  # noqa: E501

        :param converge: The converge of this VariantExternalAF.
        :type converge: float
        """

        self._converge = converge

    @property
    def krgdb(self) -> float:
        """Gets the krgdb of this VariantExternalAF.

        Allele frequency in Koreans  # noqa: E501

        :return: The krgdb of this VariantExternalAF.
        :rtype: float
        """
        return self._krgdb

    @krgdb.setter
    def krgdb(self, krgdb: float):
        """Sets the krgdb of this VariantExternalAF.

        Allele frequency in Koreans  # noqa: E501

        :param krgdb: The krgdb of this VariantExternalAF.
        :type krgdb: float
        """

        self._krgdb = krgdb

    @property
    def jirdc(self) -> float:
        """Gets the jirdc of this VariantExternalAF.

        Japanese IRDC  # noqa: E501

        :return: The jirdc of this VariantExternalAF.
        :rtype: float
        """
        return self._jirdc

    @jirdc.setter
    def jirdc(self, jirdc: float):
        """Sets the jirdc of this VariantExternalAF.

        Japanese IRDC  # noqa: E501

        :param jirdc: The jirdc of this VariantExternalAF.
        :type jirdc: float
        """

        self._jirdc = jirdc

    @property
    def ukirdc(self) -> float:
        """Gets the ukirdc of this VariantExternalAF.

        UKIRDC  # noqa: E501

        :return: The ukirdc of this VariantExternalAF.
        :rtype: float
        """
        return self._ukirdc

    @ukirdc.setter
    def ukirdc(self, ukirdc: float):
        """Sets the ukirdc of this VariantExternalAF.

        UKIRDC  # noqa: E501

        :param ukirdc: The ukirdc of this VariantExternalAF.
        :type ukirdc: float
        """

        self._ukirdc = ukirdc
