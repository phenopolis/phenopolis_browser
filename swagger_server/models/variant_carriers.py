# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.patient_basic import PatientBasic  # noqa: F401,E501
from swagger_server import util


class VariantCarriers(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, heterozygous: PatientBasic=None, homozygous: PatientBasic=None, missing: PatientBasic=None):  # noqa: E501
        """VariantCarriers - a model defined in Swagger

        :param heterozygous: The heterozygous of this VariantCarriers.  # noqa: E501
        :type heterozygous: PatientBasic
        :param homozygous: The homozygous of this VariantCarriers.  # noqa: E501
        :type homozygous: PatientBasic
        :param missing: The missing of this VariantCarriers.  # noqa: E501
        :type missing: PatientBasic
        """
        self.swagger_types = {
            'heterozygous': PatientBasic,
            'homozygous': PatientBasic,
            'missing': PatientBasic
        }

        self.attribute_map = {
            'heterozygous': 'heterozygous',
            'homozygous': 'homozygous',
            'missing': 'missing'
        }

        self._heterozygous = heterozygous
        self._homozygous = homozygous
        self._missing = missing

    @classmethod
    def from_dict(cls, dikt) -> 'VariantCarriers':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Variant_carriers of this VariantCarriers.  # noqa: E501
        :rtype: VariantCarriers
        """
        return util.deserialize_model(dikt, cls)

    @property
    def heterozygous(self) -> PatientBasic:
        """Gets the heterozygous of this VariantCarriers.


        :return: The heterozygous of this VariantCarriers.
        :rtype: PatientBasic
        """
        return self._heterozygous

    @heterozygous.setter
    def heterozygous(self, heterozygous: PatientBasic):
        """Sets the heterozygous of this VariantCarriers.


        :param heterozygous: The heterozygous of this VariantCarriers.
        :type heterozygous: PatientBasic
        """

        self._heterozygous = heterozygous

    @property
    def homozygous(self) -> PatientBasic:
        """Gets the homozygous of this VariantCarriers.


        :return: The homozygous of this VariantCarriers.
        :rtype: PatientBasic
        """
        return self._homozygous

    @homozygous.setter
    def homozygous(self, homozygous: PatientBasic):
        """Sets the homozygous of this VariantCarriers.


        :param homozygous: The homozygous of this VariantCarriers.
        :type homozygous: PatientBasic
        """

        self._homozygous = homozygous

    @property
    def missing(self) -> PatientBasic:
        """Gets the missing of this VariantCarriers.


        :return: The missing of this VariantCarriers.
        :rtype: PatientBasic
        """
        return self._missing

    @missing.setter
    def missing(self, missing: PatientBasic):
        """Sets the missing of this VariantCarriers.


        :param missing: The missing of this VariantCarriers.
        :type missing: PatientBasic
        """

        self._missing = missing
